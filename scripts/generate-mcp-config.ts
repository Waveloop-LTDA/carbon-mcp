#!/usr/bin/env tsx

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { writeFileSync, readFileSync, existsSync, mkdirSync } from 'fs';
import { homedir, platform } from 'os';

// Obter o diret√≥rio raiz do projeto
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = dirname(__dirname);

// Detectar sistema operacional e definir caminhos do Cursor
function getCursorConfigPath(): string {
  const os = platform();
  const homeDir = homedir();
  
  // Caminhos poss√≠veis para o arquivo mcp.json (ordenados por prioridade)
  const possiblePaths = [
    // Caminho mais comum: ~/.cursor/mcp.json (funciona em todos os SOs)
    join(homeDir, '.cursor', 'mcp.json'),
    
    // Caminhos espec√≠ficos por sistema operacional
    ...(os === 'win32' ? [
      // Windows: C:\Users\username\.cursor\mcp.json
      join(homeDir, 'AppData', 'Roaming', 'Cursor', 'User', 'mcp.json'),
      join(homeDir, 'AppData', 'Roaming', 'Cursor', 'mcp.json')
    ] : []),
    
    ...(os === 'darwin' ? [
      // macOS: /Users/username/.cursor/mcp.json
      join(homeDir, 'Library', 'Application Support', 'Cursor', 'User', 'mcp.json'),
      join(homeDir, 'Library', 'Application Support', 'Cursor', 'mcp.json')
    ] : []),
    
    ...(os === 'linux' ? [
      // Linux: /home/username/.cursor/mcp.json
      join(homeDir, '.config', 'Cursor', 'User', 'mcp.json'),
      join(homeDir, '.config', 'Cursor', 'mcp.json')
    ] : [])
  ];
  
  // Procurar por arquivo existente
  console.log(`üîç Procurando arquivo mcp.json em ${possiblePaths.length} locais poss√≠veis...`);
  
  for (const path of possiblePaths) {
    if (existsSync(path)) {
      console.log(`‚úÖ Arquivo de configura√ß√£o encontrado: ${path}`);
      return path;
    }
  }
  
  // Se n√£o encontrou, usar o caminho padr√£o mais comum
  const defaultPath = join(homeDir, '.cursor', 'mcp.json');
  console.log(`üìÅ Arquivo n√£o encontrado, usando caminho padr√£o: ${defaultPath}`);
  return defaultPath;
}

// Caminhos absolutos para os arquivos
const distPath = join(projectRoot, 'dist', 'index.js');
const componentsPath = join(projectRoot, 'data', 'components.json');
const tokensPath = join(projectRoot, 'data', 'tokens.json');
const iconsPath = join(projectRoot, 'data', 'icons.json');
const pictogramsPath = join(projectRoot, 'data', 'pictograms.json');

// Configura√ß√£o do servidor carbon-mcp
const carbonMcpConfig = {
  command: "node",
  args: [distPath],
  env: {
    "CARBON_DB": componentsPath,
    "CARBON_TOKENS": tokensPath,
    "CARBON_ICONS": iconsPath,
    "CARBON_PICTOS": pictogramsPath
  }
};

// Configura√ß√£o completa do MCP (apenas carbon-mcp)
const mcpConfig = {
  mcpServers: {
    "carbon-mcp": carbonMcpConfig
  }
};

// Fun√ß√£o para verificar se a configura√ß√£o j√° existe e √© igual
function isConfigEqual(existing: any, newConfig: any): boolean {
  if (!existing || !newConfig) return false;
  
  // Comparar command e args
  if (existing.command !== newConfig.command) return false;
  if (JSON.stringify(existing.args) !== JSON.stringify(newConfig.args)) return false;
  
  // Comparar vari√°veis de ambiente
  if (!existing.env || !newConfig.env) return false;
  if (JSON.stringify(existing.env) !== JSON.stringify(newConfig.env)) return false;
  
  return true;
}

// Fun√ß√£o para atualizar configura√ß√£o do Cursor
function updateCursorConfig(): boolean {
  try {
    const cursorConfigPath = getCursorConfigPath();
    const configDir = dirname(cursorConfigPath);
    
    // Criar diret√≥rio se n√£o existir
    if (!existsSync(configDir)) {
      mkdirSync(configDir, { recursive: true });
      console.log(`üìÅ Diret√≥rio criado: ${configDir}`);
    }
    
    let existingConfig: { mcpServers: Record<string, any> } = { mcpServers: {} };
    
    // Ler configura√ß√£o existente se existir
    if (existsSync(cursorConfigPath)) {
      const existingContent = readFileSync(cursorConfigPath, 'utf-8');
      try {
        existingConfig = JSON.parse(existingContent);
      } catch (error) {
        console.warn('‚ö†Ô∏è  Arquivo de configura√ß√£o do Cursor corrompido, criando novo...');
        existingConfig = { mcpServers: {} };
      }
    }
    
    // Verificar se carbon-mcp j√° existe
    const existingCarbonMcp = existingConfig.mcpServers["carbon-mcp"];
    
    if (existingCarbonMcp) {
      // Verificar se a configura√ß√£o √© igual
      if (isConfigEqual(existingCarbonMcp, carbonMcpConfig)) {
        console.log('‚úÖ Servidor carbon-mcp j√° est√° configurado corretamente!');
        console.log('‚è≠Ô∏è  Nenhuma altera√ß√£o necess√°ria');
        return true;
      } else {
        console.log('üîÑ Servidor carbon-mcp existe mas com configura√ß√£o diferente');
        console.log('üìù Atualizando configura√ß√£o...');
      }
    } else {
      console.log('‚ûï Servidor carbon-mcp n√£o encontrado, adicionando...');
    }
    
    // Atualizar ou adicionar configura√ß√£o do carbon-mcp
    existingConfig.mcpServers["carbon-mcp"] = carbonMcpConfig;
    
    // Salvar configura√ß√£o atualizada
    writeFileSync(cursorConfigPath, JSON.stringify(existingConfig, null, 2));
    
    console.log('‚úÖ Configura√ß√£o do Cursor atualizada com sucesso!');
    console.log(`üìÅ Arquivo: ${cursorConfigPath}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar configura√ß√£o do Cursor:', error);
    return false;
  }
}

// Gerar o arquivo de configura√ß√£o standalone
const configPath = join(projectRoot, 'mcp-config.json');
writeFileSync(configPath, JSON.stringify(mcpConfig, null, 2));

console.log('üöÄ Gerando configura√ß√£o do MCP...');
console.log(`üìÅ Arquivo standalone salvo em: ${configPath}`);

// Atualizar configura√ß√£o do Cursor
console.log('\nüîß Atualizando configura√ß√£o do Cursor...');
const cursorUpdated = updateCursorConfig();

if (cursorUpdated) {
  console.log('\nüéâ Configura√ß√£o completa!');
  console.log('üìã Servidor carbon-mcp foi adicionado/atualizado no Cursor');
  console.log('üîÑ Reinicie o Cursor para aplicar as mudan√ßas');
} else {
  console.log('\n‚ö†Ô∏è  Configura√ß√£o standalone gerada, mas falha ao atualizar Cursor');
  console.log('üìã Use o arquivo mcp-config.json manualmente');
}

console.log('\nüìã Configura√ß√£o gerada:');
console.log(JSON.stringify(mcpConfig, null, 2));
